// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class ExampleEvent extends ethereum.Event {
  get params(): ExampleEvent__Params {
    return new ExampleEvent__Params(this);
  }
}

export class ExampleEvent__Params {
  _event: ExampleEvent;

  constructor(event: ExampleEvent) {
    this._event = event;
  }

  get exampleParam(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ExampleContract extends ethereum.SmartContract {
  static bind(address: Address): ExampleContract {
    return new ExampleContract('ExampleContract', address);
  }

  getAndReturnAddress(x: Address): Address {
    let result = super.call('getAndReturnAddress', 'getAndReturnAddress(address):(address)', [
      ethereum.Value.fromAddress(x),
    ]);

    return result[0].toAddress();
  }

  try_getAndReturnAddress(x: Address): ethereum.CallResult<Address> {
    let result = super.tryCall('getAndReturnAddress', 'getAndReturnAddress(address):(address)', [
      ethereum.Value.fromAddress(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAndReturnString(x: string): string {
    let result = super.call('getAndReturnString', 'getAndReturnString(string):(string)', [
      ethereum.Value.fromString(x),
    ]);

    return result[0].toString();
  }

  try_getAndReturnString(x: string): ethereum.CallResult<string> {
    let result = super.tryCall('getAndReturnString', 'getAndReturnString(string):(string)', [
      ethereum.Value.fromString(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAndReturnBool(x: boolean): boolean {
    let result = super.call('getAndReturnBool', 'getAndReturnBool(bool):(bool)', [
      ethereum.Value.fromBoolean(x),
    ]);

    return result[0].toBoolean();
  }

  try_getAndReturnBool(x: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall('getAndReturnBool', 'getAndReturnBool(bool):(bool)', [
      ethereum.Value.fromBoolean(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAndReturnByte(x: Bytes): Bytes {
    let result = super.call('getAndReturnByte', 'getAndReturnByte(byte):(byte)', [
      ethereum.Value.fromFixedBytes(x),
    ]);

    return result[0].toBytes();
  }

  try_getAndReturnByte(x: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall('getAndReturnByte', 'getAndReturnByte(byte):(byte)', [
      ethereum.Value.fromFixedBytes(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAndReturnBytes1(x: Bytes): Bytes {
    let result = super.call('getAndReturnBytes1', 'getAndReturnBytes1(bytes1):(bytes1)', [
      ethereum.Value.fromFixedBytes(x),
    ]);

    return result[0].toBytes();
  }

  try_getAndReturnBytes1(x: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall('getAndReturnBytes1', 'getAndReturnBytes1(bytes1):(bytes1)', [
      ethereum.Value.fromFixedBytes(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAndReturnBytes32(x: Bytes): Bytes {
    let result = super.call('getAndReturnBytes32', 'getAndReturnBytes32(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(x),
    ]);

    return result[0].toBytes();
  }

  try_getAndReturnBytes32(x: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall('getAndReturnBytes32', 'getAndReturnBytes32(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAndReturnInt8(x: i32): i32 {
    let result = super.call('getAndReturnInt8', 'getAndReturnInt8(int8):(int8)', [
      ethereum.Value.fromI32(x),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnInt8(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnInt8', 'getAndReturnInt8(int8):(int8)', [
      ethereum.Value.fromI32(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnInt16(x: i32): i32 {
    let result = super.call('getAndReturnInt16', 'getAndReturnInt16(int16):(int16)', [
      ethereum.Value.fromI32(x),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnInt16(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnInt16', 'getAndReturnInt16(int16):(int16)', [
      ethereum.Value.fromI32(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnInt24(x: i32): i32 {
    let result = super.call('getAndReturnInt24', 'getAndReturnInt24(int24):(int24)', [
      ethereum.Value.fromI32(x),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnInt24(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnInt24', 'getAndReturnInt24(int24):(int24)', [
      ethereum.Value.fromI32(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnInt32(x: i32): i32 {
    let result = super.call('getAndReturnInt32', 'getAndReturnInt32(int32):(int32)', [
      ethereum.Value.fromI32(x),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnInt32(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnInt32', 'getAndReturnInt32(int32):(int32)', [
      ethereum.Value.fromI32(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnInt40(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt40', 'getAndReturnInt40(int40):(int40)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt40(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt40', 'getAndReturnInt40(int40):(int40)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt48(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt48', 'getAndReturnInt48(int48):(int48)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt48(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt48', 'getAndReturnInt48(int48):(int48)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt56(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt56', 'getAndReturnInt56(int56):(int56)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt56(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt56', 'getAndReturnInt56(int56):(int56)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt64(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt64', 'getAndReturnInt64(int64):(int64)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt64(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt64', 'getAndReturnInt64(int64):(int64)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt72(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt72', 'getAndReturnInt72(int72):(int72)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt72(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt72', 'getAndReturnInt72(int72):(int72)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt80(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt80', 'getAndReturnInt80(int80):(int80)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt80(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt80', 'getAndReturnInt80(int80):(int80)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt88(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt88', 'getAndReturnInt88(int88):(int88)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt88(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt88', 'getAndReturnInt88(int88):(int88)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt96(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt96', 'getAndReturnInt96(int96):(int96)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt96(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt96', 'getAndReturnInt96(int96):(int96)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt104(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt104', 'getAndReturnInt104(int104):(int104)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt104(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt104', 'getAndReturnInt104(int104):(int104)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt112(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt112', 'getAndReturnInt112(int112):(int112)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt112(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt112', 'getAndReturnInt112(int112):(int112)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt120(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt120', 'getAndReturnInt120(int120):(int120)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt120(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt120', 'getAndReturnInt120(int120):(int120)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt128(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt128', 'getAndReturnInt128(int128):(int128)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt128(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt128', 'getAndReturnInt128(int128):(int128)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt136(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt136', 'getAndReturnInt136(int136):(int136)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt136(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt136', 'getAndReturnInt136(int136):(int136)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt144(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt144', 'getAndReturnInt144(int144):(int144)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt144(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt144', 'getAndReturnInt144(int144):(int144)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt152(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt152', 'getAndReturnInt152(int152):(int152)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt152(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt152', 'getAndReturnInt152(int152):(int152)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt160(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt160', 'getAndReturnInt160(int160):(int160)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt160(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt160', 'getAndReturnInt160(int160):(int160)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt168(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt168', 'getAndReturnInt168(int168):(int168)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt168(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt168', 'getAndReturnInt168(int168):(int168)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt176(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt176', 'getAndReturnInt176(int176):(int176)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt176(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt176', 'getAndReturnInt176(int176):(int176)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt184(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt184', 'getAndReturnInt184(int184):(int184)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt184(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt184', 'getAndReturnInt184(int184):(int184)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt192(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt192', 'getAndReturnInt192(int192):(int192)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt192(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt192', 'getAndReturnInt192(int192):(int192)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt200(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt200', 'getAndReturnInt200(int200):(int200)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt200(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt200', 'getAndReturnInt200(int200):(int200)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt208(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt208', 'getAndReturnInt208(int208):(int208)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt208(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt208', 'getAndReturnInt208(int208):(int208)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt216(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt216', 'getAndReturnInt216(int216):(int216)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt216(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt216', 'getAndReturnInt216(int216):(int216)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt224(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt224', 'getAndReturnInt224(int224):(int224)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt224(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt224', 'getAndReturnInt224(int224):(int224)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt232(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt232', 'getAndReturnInt232(int232):(int232)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt232(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt232', 'getAndReturnInt232(int232):(int232)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt240(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt240', 'getAndReturnInt240(int240):(int240)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt240(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt240', 'getAndReturnInt240(int240):(int240)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt248(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt248', 'getAndReturnInt248(int248):(int248)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt248(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt248', 'getAndReturnInt248(int248):(int248)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnInt256(x: BigInt): BigInt {
    let result = super.call('getAndReturnInt256', 'getAndReturnInt256(int256):(int256)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnInt256(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnInt256', 'getAndReturnInt256(int256):(int256)', [
      ethereum.Value.fromSignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint8(x: i32): i32 {
    let result = super.call('getAndReturnUint8', 'getAndReturnUint8(uint8):(uint8)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnUint8(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnUint8', 'getAndReturnUint8(uint8):(uint8)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnUint16(x: i32): i32 {
    let result = super.call('getAndReturnUint16', 'getAndReturnUint16(uint16):(uint16)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnUint16(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnUint16', 'getAndReturnUint16(uint16):(uint16)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnUint24(x: i32): i32 {
    let result = super.call('getAndReturnUint24', 'getAndReturnUint24(uint24):(uint24)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);

    return result[0].toI32();
  }

  try_getAndReturnUint24(x: i32): ethereum.CallResult<i32> {
    let result = super.tryCall('getAndReturnUint24', 'getAndReturnUint24(uint24):(uint24)', [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAndReturnUint32(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint32', 'getAndReturnUint32(uint32):(uint32)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint32(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint32', 'getAndReturnUint32(uint32):(uint32)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint40(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint40', 'getAndReturnUint40(uint40):(uint40)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint40(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint40', 'getAndReturnUint40(uint40):(uint40)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint48(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint48', 'getAndReturnUint48(uint48):(uint48)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint48(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint48', 'getAndReturnUint48(uint48):(uint48)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint56(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint56', 'getAndReturnUint56(uint56):(uint56)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint56(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint56', 'getAndReturnUint56(uint56):(uint56)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint64(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint64', 'getAndReturnUint64(uint64):(uint64)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint64(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint64', 'getAndReturnUint64(uint64):(uint64)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint72(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint72', 'getAndReturnUint72(uint72):(uint72)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint72(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint72', 'getAndReturnUint72(uint72):(uint72)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint80(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint80', 'getAndReturnUint80(uint80):(uint80)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint80(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint80', 'getAndReturnUint80(uint80):(uint80)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint88(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint88', 'getAndReturnUint88(uint88):(uint88)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint88(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint88', 'getAndReturnUint88(uint88):(uint88)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint96(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint96', 'getAndReturnUint96(uint96):(uint96)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint96(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint96', 'getAndReturnUint96(uint96):(uint96)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint104(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint104', 'getAndReturnUint104(uint104):(uint104)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint104(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint104', 'getAndReturnUint104(uint104):(uint104)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint112(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint112', 'getAndReturnUint112(uint112):(uint112)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint112(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint112', 'getAndReturnUint112(uint112):(uint112)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint120(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint120', 'getAndReturnUint120(uint120):(uint120)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint120(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint120', 'getAndReturnUint120(uint120):(uint120)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint128(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint128', 'getAndReturnUint128(uint128):(uint128)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint128(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint128', 'getAndReturnUint128(uint128):(uint128)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint136(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint136', 'getAndReturnUint136(uint136):(uint136)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint136(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint136', 'getAndReturnUint136(uint136):(uint136)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint144(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint144', 'getAndReturnUint144(uint144):(uint144)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint144(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint144', 'getAndReturnUint144(uint144):(uint144)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint152(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint152', 'getAndReturnUint152(uint152):(uint152)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint152(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint152', 'getAndReturnUint152(uint152):(uint152)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint160(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint160', 'getAndReturnUint160(uint160):(uint160)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint160(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint160', 'getAndReturnUint160(uint160):(uint160)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint168(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint168', 'getAndReturnUint168(uint168):(uint168)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint168(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint168', 'getAndReturnUint168(uint168):(uint168)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint176(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint176', 'getAndReturnUint176(uint176):(uint176)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint176(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint176', 'getAndReturnUint176(uint176):(uint176)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint184(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint184', 'getAndReturnUint184(uint184):(uint184)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint184(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint184', 'getAndReturnUint184(uint184):(uint184)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint192(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint192', 'getAndReturnUint192(uint192):(uint192)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint192(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint192', 'getAndReturnUint192(uint192):(uint192)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint200(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint200', 'getAndReturnUint200(uint200):(uint200)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint200(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint200', 'getAndReturnUint200(uint200):(uint200)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint208(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint208', 'getAndReturnUint208(uint208):(uint208)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint208(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint208', 'getAndReturnUint208(uint208):(uint208)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint216(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint216', 'getAndReturnUint216(uint216):(uint216)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint216(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint216', 'getAndReturnUint216(uint216):(uint216)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint224(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint224', 'getAndReturnUint224(uint224):(uint224)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint224(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint224', 'getAndReturnUint224(uint224):(uint224)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint232(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint232', 'getAndReturnUint232(uint232):(uint232)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint232(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint232', 'getAndReturnUint232(uint232):(uint232)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint240(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint240', 'getAndReturnUint240(uint240):(uint240)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint240(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint240', 'getAndReturnUint240(uint240):(uint240)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint248(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint248', 'getAndReturnUint248(uint248):(uint248)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint248(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint248', 'getAndReturnUint248(uint248):(uint248)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnUint256(x: BigInt): BigInt {
    let result = super.call('getAndReturnUint256', 'getAndReturnUint256(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);

    return result[0].toBigInt();
  }

  try_getAndReturnUint256(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getAndReturnUint256', 'getAndReturnUint256(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAndReturnAddressArray(x: Array<Address>): Array<Address> {
    let result = super.call(
      'getAndReturnAddressArray',
      'getAndReturnAddressArray(address[]):(address[])',
      [ethereum.Value.fromAddressArray(x)],
    );

    return result[0].toAddressArray();
  }

  try_getAndReturnAddressArray(x: Array<Address>): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      'getAndReturnAddressArray',
      'getAndReturnAddressArray(address[]):(address[])',
      [ethereum.Value.fromAddressArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAndReturnStringArray(x: Array<string>): Array<string> {
    let result = super.call(
      'getAndReturnStringArray',
      'getAndReturnStringArray(string[]):(string[])',
      [ethereum.Value.fromStringArray(x)],
    );

    return result[0].toStringArray();
  }

  try_getAndReturnStringArray(x: Array<string>): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      'getAndReturnStringArray',
      'getAndReturnStringArray(string[]):(string[])',
      [ethereum.Value.fromStringArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getAndReturnBoolArray(x: Array<boolean>): Array<boolean> {
    let result = super.call('getAndReturnBoolArray', 'getAndReturnBoolArray(bool[]):(bool[])', [
      ethereum.Value.fromBooleanArray(x),
    ]);

    return result[0].toBooleanArray();
  }

  try_getAndReturnBoolArray(x: Array<boolean>): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall('getAndReturnBoolArray', 'getAndReturnBoolArray(bool[]):(bool[])', [
      ethereum.Value.fromBooleanArray(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  getAndReturnByteArray(x: Array<Bytes>): Array<Bytes> {
    let result = super.call('getAndReturnByteArray', 'getAndReturnByteArray(byte[]):(byte[])', [
      ethereum.Value.fromFixedBytesArray(x),
    ]);

    return result[0].toBytesArray();
  }

  try_getAndReturnByteArray(x: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall('getAndReturnByteArray', 'getAndReturnByteArray(byte[]):(byte[])', [
      ethereum.Value.fromFixedBytesArray(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAndReturnBytes1Array(x: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      'getAndReturnBytes1Array',
      'getAndReturnBytes1Array(bytes1[]):(bytes1[])',
      [ethereum.Value.fromFixedBytesArray(x)],
    );

    return result[0].toBytesArray();
  }

  try_getAndReturnBytes1Array(x: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      'getAndReturnBytes1Array',
      'getAndReturnBytes1Array(bytes1[]):(bytes1[])',
      [ethereum.Value.fromFixedBytesArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAndReturnBytes32Array(x: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      'getAndReturnBytes32Array',
      'getAndReturnBytes32Array(bytes32[]):(bytes32[])',
      [ethereum.Value.fromFixedBytesArray(x)],
    );

    return result[0].toBytesArray();
  }

  try_getAndReturnBytes32Array(x: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      'getAndReturnBytes32Array',
      'getAndReturnBytes32Array(bytes32[]):(bytes32[])',
      [ethereum.Value.fromFixedBytesArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getAndReturnInt8Array(x: Array<i32>): Array<i32> {
    let result = super.call('getAndReturnInt8Array', 'getAndReturnInt8Array(int8[]):(int8[])', [
      ethereum.Value.fromI32Array(x),
    ]);

    return result[0].toI32Array();
  }

  try_getAndReturnInt8Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall('getAndReturnInt8Array', 'getAndReturnInt8Array(int8[]):(int8[])', [
      ethereum.Value.fromI32Array(x),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnInt16Array(x: Array<i32>): Array<i32> {
    let result = super.call('getAndReturnInt16Array', 'getAndReturnInt16Array(int16[]):(int16[])', [
      ethereum.Value.fromI32Array(x),
    ]);

    return result[0].toI32Array();
  }

  try_getAndReturnInt16Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnInt16Array',
      'getAndReturnInt16Array(int16[]):(int16[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnInt24Array(x: Array<i32>): Array<i32> {
    let result = super.call('getAndReturnInt24Array', 'getAndReturnInt24Array(int24[]):(int24[])', [
      ethereum.Value.fromI32Array(x),
    ]);

    return result[0].toI32Array();
  }

  try_getAndReturnInt24Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnInt24Array',
      'getAndReturnInt24Array(int24[]):(int24[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnInt32Array(x: Array<i32>): Array<i32> {
    let result = super.call('getAndReturnInt32Array', 'getAndReturnInt32Array(int32[]):(int32[])', [
      ethereum.Value.fromI32Array(x),
    ]);

    return result[0].toI32Array();
  }

  try_getAndReturnInt32Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnInt32Array',
      'getAndReturnInt32Array(int32[]):(int32[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnInt40Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt40Array', 'getAndReturnInt40Array(int40[]):(int40[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt40Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt40Array',
      'getAndReturnInt40Array(int40[]):(int40[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt48Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt48Array', 'getAndReturnInt48Array(int48[]):(int48[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt48Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt48Array',
      'getAndReturnInt48Array(int48[]):(int48[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt56Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt56Array', 'getAndReturnInt56Array(int56[]):(int56[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt56Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt56Array',
      'getAndReturnInt56Array(int56[]):(int56[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt64Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt64Array', 'getAndReturnInt64Array(int64[]):(int64[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt64Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt64Array',
      'getAndReturnInt64Array(int64[]):(int64[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt72Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt72Array', 'getAndReturnInt72Array(int72[]):(int72[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt72Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt72Array',
      'getAndReturnInt72Array(int72[]):(int72[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt80Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt80Array', 'getAndReturnInt80Array(int80[]):(int80[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt80Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt80Array',
      'getAndReturnInt80Array(int80[]):(int80[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt88Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt88Array', 'getAndReturnInt88Array(int88[]):(int88[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt88Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt88Array',
      'getAndReturnInt88Array(int88[]):(int88[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt96Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call('getAndReturnInt96Array', 'getAndReturnInt96Array(int96[]):(int96[])', [
      ethereum.Value.fromSignedBigIntArray(x),
    ]);

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt96Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt96Array',
      'getAndReturnInt96Array(int96[]):(int96[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt104Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt104Array',
      'getAndReturnInt104Array(int104[]):(int104[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt104Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt104Array',
      'getAndReturnInt104Array(int104[]):(int104[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt112Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt112Array',
      'getAndReturnInt112Array(int112[]):(int112[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt112Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt112Array',
      'getAndReturnInt112Array(int112[]):(int112[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt120Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt120Array',
      'getAndReturnInt120Array(int120[]):(int120[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt120Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt120Array',
      'getAndReturnInt120Array(int120[]):(int120[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt128Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt128Array',
      'getAndReturnInt128Array(int128[]):(int128[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt128Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt128Array',
      'getAndReturnInt128Array(int128[]):(int128[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt136Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt136Array',
      'getAndReturnInt136Array(int136[]):(int136[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt136Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt136Array',
      'getAndReturnInt136Array(int136[]):(int136[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt144Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt144Array',
      'getAndReturnInt144Array(int144[]):(int144[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt144Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt144Array',
      'getAndReturnInt144Array(int144[]):(int144[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt152Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt152Array',
      'getAndReturnInt152Array(int152[]):(int152[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt152Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt152Array',
      'getAndReturnInt152Array(int152[]):(int152[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt160Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt160Array',
      'getAndReturnInt160Array(int160[]):(int160[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt160Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt160Array',
      'getAndReturnInt160Array(int160[]):(int160[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt168Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt168Array',
      'getAndReturnInt168Array(int168[]):(int168[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt168Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt168Array',
      'getAndReturnInt168Array(int168[]):(int168[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt176Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt176Array',
      'getAndReturnInt176Array(int176[]):(int176[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt176Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt176Array',
      'getAndReturnInt176Array(int176[]):(int176[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt184Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt184Array',
      'getAndReturnInt184Array(int184[]):(int184[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt184Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt184Array',
      'getAndReturnInt184Array(int184[]):(int184[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt192Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt192Array',
      'getAndReturnInt192Array(int192[]):(int192[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt192Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt192Array',
      'getAndReturnInt192Array(int192[]):(int192[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt200Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt200Array',
      'getAndReturnInt200Array(int200[]):(int200[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt200Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt200Array',
      'getAndReturnInt200Array(int200[]):(int200[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt208Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt208Array',
      'getAndReturnInt208Array(int208[]):(int208[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt208Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt208Array',
      'getAndReturnInt208Array(int208[]):(int208[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt216Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt216Array',
      'getAndReturnInt216Array(int216[]):(int216[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt216Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt216Array',
      'getAndReturnInt216Array(int216[]):(int216[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt224Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt224Array',
      'getAndReturnInt224Array(int224[]):(int224[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt224Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt224Array',
      'getAndReturnInt224Array(int224[]):(int224[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt232Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt232Array',
      'getAndReturnInt232Array(int232[]):(int232[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt232Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt232Array',
      'getAndReturnInt232Array(int232[]):(int232[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt240Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt240Array',
      'getAndReturnInt240Array(int240[]):(int240[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt240Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt240Array',
      'getAndReturnInt240Array(int240[]):(int240[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt248Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt248Array',
      'getAndReturnInt248Array(int248[]):(int248[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt248Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt248Array',
      'getAndReturnInt248Array(int248[]):(int248[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnInt256Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnInt256Array',
      'getAndReturnInt256Array(int256[]):(int256[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnInt256Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnInt256Array',
      'getAndReturnInt256Array(int256[]):(int256[])',
      [ethereum.Value.fromSignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint8Array(x: Array<i32>): Array<i32> {
    let result = super.call('getAndReturnUint8Array', 'getAndReturnUint8Array(uint8[]):(uint8[])', [
      ethereum.Value.fromI32Array(x),
    ]);

    return result[0].toI32Array();
  }

  try_getAndReturnUint8Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnUint8Array',
      'getAndReturnUint8Array(uint8[]):(uint8[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnUint16Array(x: Array<i32>): Array<i32> {
    let result = super.call(
      'getAndReturnUint16Array',
      'getAndReturnUint16Array(uint16[]):(uint16[])',
      [ethereum.Value.fromI32Array(x)],
    );

    return result[0].toI32Array();
  }

  try_getAndReturnUint16Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnUint16Array',
      'getAndReturnUint16Array(uint16[]):(uint16[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnUint24Array(x: Array<i32>): Array<i32> {
    let result = super.call(
      'getAndReturnUint24Array',
      'getAndReturnUint24Array(uint24[]):(uint24[])',
      [ethereum.Value.fromI32Array(x)],
    );

    return result[0].toI32Array();
  }

  try_getAndReturnUint24Array(x: Array<i32>): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall(
      'getAndReturnUint24Array',
      'getAndReturnUint24Array(uint24[]):(uint24[])',
      [ethereum.Value.fromI32Array(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  getAndReturnUint32Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint32Array',
      'getAndReturnUint32Array(uint32[]):(uint32[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint32Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint32Array',
      'getAndReturnUint32Array(uint32[]):(uint32[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint40Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint40Array',
      'getAndReturnUint40Array(uint40[]):(uint40[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint40Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint40Array',
      'getAndReturnUint40Array(uint40[]):(uint40[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint48Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint48Array',
      'getAndReturnUint48Array(uint48[]):(uint48[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint48Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint48Array',
      'getAndReturnUint48Array(uint48[]):(uint48[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint56Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint56Array',
      'getAndReturnUint56Array(uint56[]):(uint56[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint56Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint56Array',
      'getAndReturnUint56Array(uint56[]):(uint56[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint64Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint64Array',
      'getAndReturnUint64Array(uint64[]):(uint64[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint64Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint64Array',
      'getAndReturnUint64Array(uint64[]):(uint64[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint72Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint72Array',
      'getAndReturnUint72Array(uint72[]):(uint72[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint72Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint72Array',
      'getAndReturnUint72Array(uint72[]):(uint72[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint80Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint80Array',
      'getAndReturnUint80Array(uint80[]):(uint80[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint80Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint80Array',
      'getAndReturnUint80Array(uint80[]):(uint80[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint88Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint88Array',
      'getAndReturnUint88Array(uint88[]):(uint88[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint88Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint88Array',
      'getAndReturnUint88Array(uint88[]):(uint88[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint96Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint96Array',
      'getAndReturnUint96Array(uint96[]):(uint96[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint96Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint96Array',
      'getAndReturnUint96Array(uint96[]):(uint96[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint104Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint104Array',
      'getAndReturnUint104Array(uint104[]):(uint104[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint104Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint104Array',
      'getAndReturnUint104Array(uint104[]):(uint104[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint112Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint112Array',
      'getAndReturnUint112Array(uint112[]):(uint112[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint112Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint112Array',
      'getAndReturnUint112Array(uint112[]):(uint112[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint120Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint120Array',
      'getAndReturnUint120Array(uint120[]):(uint120[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint120Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint120Array',
      'getAndReturnUint120Array(uint120[]):(uint120[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint128Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint128Array',
      'getAndReturnUint128Array(uint128[]):(uint128[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint128Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint128Array',
      'getAndReturnUint128Array(uint128[]):(uint128[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint136Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint136Array',
      'getAndReturnUint136Array(uint136[]):(uint136[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint136Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint136Array',
      'getAndReturnUint136Array(uint136[]):(uint136[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint144Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint144Array',
      'getAndReturnUint144Array(uint144[]):(uint144[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint144Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint144Array',
      'getAndReturnUint144Array(uint144[]):(uint144[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint152Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint152Array',
      'getAndReturnUint152Array(uint152[]):(uint152[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint152Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint152Array',
      'getAndReturnUint152Array(uint152[]):(uint152[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint160Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint160Array',
      'getAndReturnUint160Array(uint160[]):(uint160[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint160Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint160Array',
      'getAndReturnUint160Array(uint160[]):(uint160[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint168Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint168Array',
      'getAndReturnUint168Array(uint168[]):(uint168[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint168Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint168Array',
      'getAndReturnUint168Array(uint168[]):(uint168[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint176Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint176Array',
      'getAndReturnUint176Array(uint176[]):(uint176[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint176Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint176Array',
      'getAndReturnUint176Array(uint176[]):(uint176[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint184Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint184Array',
      'getAndReturnUint184Array(uint184[]):(uint184[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint184Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint184Array',
      'getAndReturnUint184Array(uint184[]):(uint184[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint192Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint192Array',
      'getAndReturnUint192Array(uint192[]):(uint192[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint192Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint192Array',
      'getAndReturnUint192Array(uint192[]):(uint192[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint200Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint200Array',
      'getAndReturnUint200Array(uint200[]):(uint200[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint200Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint200Array',
      'getAndReturnUint200Array(uint200[]):(uint200[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint208Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint208Array',
      'getAndReturnUint208Array(uint208[]):(uint208[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint208Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint208Array',
      'getAndReturnUint208Array(uint208[]):(uint208[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint216Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint216Array',
      'getAndReturnUint216Array(uint216[]):(uint216[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint216Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint216Array',
      'getAndReturnUint216Array(uint216[]):(uint216[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint224Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint224Array',
      'getAndReturnUint224Array(uint224[]):(uint224[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint224Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint224Array',
      'getAndReturnUint224Array(uint224[]):(uint224[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint232Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint232Array',
      'getAndReturnUint232Array(uint232[]):(uint232[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint232Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint232Array',
      'getAndReturnUint232Array(uint232[]):(uint232[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint240Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint240Array',
      'getAndReturnUint240Array(uint240[]):(uint240[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint240Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint240Array',
      'getAndReturnUint240Array(uint240[]):(uint240[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint248Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint248Array',
      'getAndReturnUint248Array(uint248[]):(uint248[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint248Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint248Array',
      'getAndReturnUint248Array(uint248[]):(uint248[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAndReturnUint256Array(x: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      'getAndReturnUint256Array',
      'getAndReturnUint256Array(uint256[]):(uint256[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );

    return result[0].toBigIntArray();
  }

  try_getAndReturnUint256Array(x: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      'getAndReturnUint256Array',
      'getAndReturnUint256Array(uint256[]):(uint256[])',
      [ethereum.Value.fromUnsignedBigIntArray(x)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}
