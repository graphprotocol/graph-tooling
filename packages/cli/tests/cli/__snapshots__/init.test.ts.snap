// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Init > Ethereum > From contract 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract 2`] = `0`;

exports[`Init > Ethereum > From contract 3`] = `
"
Subgraph usersubgraph-from-contract created in from-contract

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract 5`] = `0`;

exports[`Init > Ethereum > From contract 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From contract with abi 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract with abi 2`] = `0`;

exports[`Init > Ethereum > From contract with abi 3`] = `
"
Subgraph usersubgraph-from-contract-with-abi created in from-contract-with-abi

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract-with-abi\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract with abi 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract with abi 5`] = `0`;

exports[`Init > Ethereum > From contract with abi 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From contract with abi and structs 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract with abi and structs 2`] = `0`;

exports[`Init > Ethereum > From contract with abi and structs 3`] = `
"
Subgraph usersubgraph-from-contract-with-abi-and-structs created in from-contract-with-abi-and-structs

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract-with-abi-and-structs\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract with abi and structs 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract with abi and structs 5`] = `0`;

exports[`Init > Ethereum > From contract with abi and structs 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 2`] = `0`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 3`] = `
"
Subgraph usersubgraph-from-contract-with-index-events-and-abi-with-id created in duplicate-ids

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd duplicate-ids\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 5`] = `0`;

exports[`Init > Ethereum > From contract with index events and abi with ID in events 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From contract with list items in abi 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract with list items in abi 2`] = `0`;

exports[`Init > Ethereum > From contract with list items in abi 3`] = `
"
Subgraph usersubgraph-from-contract-with-lists-in-abi created in from-contract-with-lists-in-abi

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract-with-lists-in-abi\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract with list items in abi 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract with list items in abi 5`] = `0`;

exports[`Init > Ethereum > From contract with list items in abi 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From contract with overloaded elements 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From contract with overloaded elements 2`] = `0`;

exports[`Init > Ethereum > From contract with overloaded elements 3`] = `
"
Subgraph usersubgraph-from-contract-with-overloaded-elements created in from-contract-with-overloaded-elements

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract-with-overloaded-elements\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From contract with overloaded elements 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/Contract.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From contract with overloaded elements 5`] = `0`;

exports[`Init > Ethereum > From contract with overloaded elements 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Ethereum > From example 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Cloning example subgraph
✔ Cloning example subgraph
- Initialize networks config
✔ Initialize networks config
- Update subgraph name and commands in package.json
✔ Update subgraph name and commands in package.json
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > Ethereum > From example 2`] = `0`;

exports[`Init > Ethereum > From example 3`] = `
"
Subgraph userexample-subgraph created in from-example

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-example\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Ethereum > From example 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
⚠ Warnings loading subgraph from subgraph.yaml: Warnings in subgraph.yaml:

    Path: description
    The description is still the one from the example subgraph.
    Please update it to tell users more about your subgraph.

✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Gravity => build/Gravity/Gravity.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Gravity/GravatarRegistry.json
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Ethereum > From example 5`] = `0`;

exports[`Init > Ethereum > From example 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > From existing subgraph > From existing subgraph 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > From existing subgraph > From existing subgraph 2`] = `0`;

exports[`Init > From existing subgraph > From existing subgraph 3`] = `
"
Subgraph userfrom-existing-subgraph created in from-subgraph

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-subgraph\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > From existing subgraph > From existing subgraph 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > From existing subgraph > From existing subgraph 5`] = `0`;

exports[`Init > From existing subgraph > From existing subgraph 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > NEAR > From contract 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Initialize networks config
✔ Initialize networks config
- Install dependencies with yarn
✔ Install dependencies with yarn
- Generate ABI and schema types with yarn codegen
✔ Generate ABI and schema types with yarn codegen
"
`;

exports[`Init > NEAR > From contract 2`] = `0`;

exports[`Init > NEAR > From contract 3`] = `
"
Subgraph usernear-from-contract created in from-contract

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-contract\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > NEAR > From contract 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
  Compile data source: Contract => build/Contract/Contract.wasm
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > NEAR > From contract 5`] = `0`;

exports[`Init > NEAR > From contract 6`] = `
"
Build completed: build/subgraph.yaml

"
`;

exports[`Init > Substreams > From package 1`] = `
" ›   Warning: The --skip-git flag will be removed in the next major version. By
 ›    default we will stop initializing a Git repository.
- Create subgraph scaffold
  Generate subgraph
- Create subgraph scaffold
  Write subgraph to directory
- Create subgraph scaffold
✔ Create subgraph scaffold
- Install dependencies with yarn
✔ Install dependencies with yarn
"
`;

exports[`Init > Substreams > From package 2`] = `0`;

exports[`Init > Substreams > From package 3`] = `
"
Subgraph usersubgraph-from-substreams created in from-package

Next steps:

  1. Run \`graph auth\` to authenticate with your deploy key.

  2. Type \`cd from-package\` to enter the subgraph.

  3. Run \`yarn deploy\` to deploy the subgraph.

Make sure to visit the documentation on https://thegraph.com/docs/ for further information.
"
`;

exports[`Init > Substreams > From package 4`] = `
"- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.1 to 0.0.2 (graph-ts dependency not installed yet)
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.2 to 0.0.3 (graph-ts dependency not installed yet)
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.3 to 0.0.4 (graph-ts dependency not installed yet)
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.4 to 0.0.5 (graph-ts dependency not installed yet)
- Apply migrations
  Skip migration: Bump mapping apiVersion from 0.0.5 to 0.0.6 (graph-ts dependency not installed yet)
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.1 to 0.0.2
- Apply migrations
  Skip migration: Bump manifest specVersion from 0.0.2 to 0.0.4
- Apply migrations
✔ Apply migrations
- Load subgraph from subgraph.yaml
✔ Load subgraph from subgraph.yaml
- Compile subgraph
✔ Compile subgraph
- Write compiled subgraph to build/
  Copy schema file build/schema.graphql
- Write compiled subgraph to build/
  Write subgraph file build/Contract/substreams.spkg
- Write compiled subgraph to build/
  Write subgraph manifest build/subgraph.yaml
- Write compiled subgraph to build/
✔ Write compiled subgraph to build/
"
`;

exports[`Init > Substreams > From package 5`] = `0`;

exports[`Init > Substreams > From package 6`] = `
"
Build completed: build/subgraph.yaml

"
`;
