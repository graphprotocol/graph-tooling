// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ABI code generation > Generated types > Type generated 1`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toI32()
            ",
      "name": "get result",
      "params": [],
      "returnType": "i32",
    },
    Method {
      "body": "
            return this[1].toAddress()
            ",
      "name": "get target",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[2].toBytes()
            ",
      "name": "get data",
      "params": [],
      "returnType": "Bytes",
    },
    Method {
      "body": "
            return this[3].toAddress()
            ",
      "name": "get proposer",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[4].toAddress()
            ",
      "name": "get feeRecipient",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[5].toBigInt()
            ",
      "name": "get fee",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[6].toBigInt()
            ",
      "name": "get startTime",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[7].toBigInt()
            ",
      "name": "get yesCount",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[8].toBigInt()
            ",
      "name": "get noCount",
      "params": [],
      "returnType": "BigInt",
    },
  ],
  "name": "Contract__getProposalResultValue0Struct",
}
`;

exports[`ABI code generation > Generated types > Type generated 2`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toI32()
            ",
      "name": "get foo",
      "params": [],
      "returnType": "i32",
    },
    Method {
      "body": "
      return changetype<Contract__getProposalInputParam1BarStruct>(this[1].toTuple())
      ",
      "name": "get bar",
      "params": [],
      "returnType": "Contract__getProposalInputParam1BarStruct",
    },
  ],
  "name": "Contract__getProposalInputParam1Struct",
}
`;

exports[`ABI code generation > Generated types > Type generated 3`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toAddress()
            ",
      "name": "get baz",
      "params": [],
      "returnType": "Address",
    },
  ],
  "name": "Contract__getProposalInputParam1BarStruct",
}
`;

exports[`ABI code generation > Generated types > Type generated 4`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toBigInt()
            ",
      "name": "get first",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[1].toString()
            ",
      "name": "get second",
      "params": [],
      "returnType": "string",
    },
  ],
  "name": "Contract__getProposalsResultValue1Struct",
}
`;

exports[`ABI code generation > Generated types > Type generated 5`] = `
Class {
  "export": true,
  "extends": undefined,
  "members": [
    ClassMember {
      "name": "value0",
      "type": "BigInt",
    },
    ClassMember {
      "name": "value1",
      "type": "Array<Contract__getProposalsResultValue1Struct>",
    },
  ],
  "methods": [
    Method {
      "body": "this.value0 = value0
this.value1 = value1",
      "name": "constructor",
      "params": Immutable.List [
        Param {
          "name": "value0",
          "type": "BigInt",
        },
        Param {
          "name": "value1",
          "type": "Array<Contract__getProposalsResultValue1Struct>",
        },
      ],
      "returnType": null,
    },
    Method {
      "body": "
            let map = new TypedMap<string,ethereum.Value>();
            map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));map.set('value1', ethereum.Value.fromTupleArray(this.value1))
            return map;
            ",
      "name": "toMap",
      "params": [],
      "returnType": NamedType {
        "name": "TypedMap<string,ethereum.Value>",
      },
    },
    Method {
      "body": "return this.value0;",
      "name": "getSize",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "return this.value1;",
      "name": "getValue1",
      "params": [],
      "returnType": "Array<Contract__getProposalsResultValue1Struct>",
    },
  ],
  "name": "Contract__getProposalsResult",
}
`;

exports[`ABI code generation > Generated types > Type generated 6`] = `
Class {
  "export": true,
  "extends": "ethereum.SmartContract",
  "members": [],
  "methods": [
    StaticMethod {
      "body": "
        return new Contract('Contract', address);
        ",
      "name": "bind",
      "params": Immutable.List [
        Param {
          "name": "address",
          "type": "Address",
        },
      ],
      "returnType": NamedType {
        "name": "Contract",
      },
    },
    Method {
      "body": "
        
        let result = super.call(
      'read',
      'read():(bytes32)',
      [])

        return ( result[0].toBytes())",
      "name": "read",
      "params": Immutable.List [],
      "returnType": NamedType {
        "name": "Bytes",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'read',
      'read():(bytes32)',
      [])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toBytes())",
      "name": "try_read",
      "params": Immutable.List [],
      "returnType": "ethereum.CallResult<Bytes>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'getProposal',
      'getProposal(uint256,(uint8,(address))):((uint8,address,bytes,address,address,uint256,uint256,uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(proposalId), ethereum.Value.fromTuple(param1)])

        return ( changetype<Contract__getProposalResultValue0Struct>(result[0].toTuple()))",
      "name": "getProposal",
      "params": Immutable.List [
        Param {
          "name": "proposalId",
          "type": "BigInt",
        },
        Param {
          "name": "param1",
          "type": "Contract__getProposalInputParam1Struct",
        },
      ],
      "returnType": NamedType {
        "name": "Contract__getProposalResultValue0Struct",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'getProposal',
      'getProposal(uint256,(uint8,(address))):((uint8,address,bytes,address,address,uint256,uint256,uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(proposalId), ethereum.Value.fromTuple(param1)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( changetype<Contract__getProposalResultValue0Struct>(value[0].toTuple()))",
      "name": "try_getProposal",
      "params": Immutable.List [
        Param {
          "name": "proposalId",
          "type": "BigInt",
        },
        Param {
          "name": "param1",
          "type": "Contract__getProposalInputParam1Struct",
        },
      ],
      "returnType": "ethereum.CallResult<Contract__getProposalResultValue0Struct>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'getProposals',
      'getProposals():(uint256,(uint256,string)[])',
      [])

        return ( new Contract__getProposalsResult(
                result[0].toBigInt(), result[1].toTupleArray<Contract__getProposalsResultValue1Struct>()
              ))",
      "name": "getProposals",
      "params": Immutable.List [],
      "returnType": NamedType {
        "name": "Contract__getProposalsResult",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'getProposals',
      'getProposals():(uint256,(uint256,string)[])',
      [])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( new Contract__getProposalsResult(
                value[0].toBigInt(), value[1].toTupleArray<Contract__getProposalsResultValue1Struct>()
              ))",
      "name": "try_getProposals",
      "params": Immutable.List [],
      "returnType": "ethereum.CallResult<Contract__getProposalsResult>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(string):(string)',
      [ethereum.Value.fromString(param0)])

        return ( result[0].toString())",
      "name": "overloaded",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "string",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(string):(string)',
      [ethereum.Value.fromString(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "string",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(uint256):(string)',
      [ethereum.Value.fromUnsignedBigInt(param0)])

        return ( result[0].toString())",
      "name": "overloaded1",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "BigInt",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(uint256):(string)',
      [ethereum.Value.fromUnsignedBigInt(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded1",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "BigInt",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(bytes32):(string)',
      [ethereum.Value.fromFixedBytes(param0)])

        return ( result[0].toString())",
      "name": "overloaded2",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "Bytes",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(bytes32):(string)',
      [ethereum.Value.fromFixedBytes(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded2",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "Bytes",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
  ],
  "name": "Contract",
}
`;

exports[`ABI code generation > Generated types > Type test 1`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toI32()
            ",
      "name": "get result",
      "params": [],
      "returnType": "i32",
    },
    Method {
      "body": "
            return this[1].toAddress()
            ",
      "name": "get target",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[2].toBytes()
            ",
      "name": "get data",
      "params": [],
      "returnType": "Bytes",
    },
    Method {
      "body": "
            return this[3].toAddress()
            ",
      "name": "get proposer",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[4].toAddress()
            ",
      "name": "get feeRecipient",
      "params": [],
      "returnType": "Address",
    },
    Method {
      "body": "
            return this[5].toBigInt()
            ",
      "name": "get fee",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[6].toBigInt()
            ",
      "name": "get startTime",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[7].toBigInt()
            ",
      "name": "get yesCount",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[8].toBigInt()
            ",
      "name": "get noCount",
      "params": [],
      "returnType": "BigInt",
    },
  ],
  "name": "Contract__getProposalResultValue0Struct",
}
`;

exports[`ABI code generation > Generated types > Type test 2`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toI32()
            ",
      "name": "get foo",
      "params": [],
      "returnType": "i32",
    },
    Method {
      "body": "
      return changetype<Contract__getProposalInputParam1BarStruct>(this[1].toTuple())
      ",
      "name": "get bar",
      "params": [],
      "returnType": "Contract__getProposalInputParam1BarStruct",
    },
  ],
  "name": "Contract__getProposalInputParam1Struct",
}
`;

exports[`ABI code generation > Generated types > Type test 3`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toAddress()
            ",
      "name": "get baz",
      "params": [],
      "returnType": "Address",
    },
  ],
  "name": "Contract__getProposalInputParam1BarStruct",
}
`;

exports[`ABI code generation > Generated types > Type test 4`] = `
Class {
  "export": true,
  "extends": "ethereum.Tuple",
  "members": [],
  "methods": [
    Method {
      "body": "
            return this[0].toBigInt()
            ",
      "name": "get first",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "
            return this[1].toString()
            ",
      "name": "get second",
      "params": [],
      "returnType": "string",
    },
  ],
  "name": "Contract__getProposalsResultValue1Struct",
}
`;

exports[`ABI code generation > Generated types > Type test 5`] = `
Class {
  "export": true,
  "extends": undefined,
  "members": [
    ClassMember {
      "name": "value0",
      "type": "BigInt",
    },
    ClassMember {
      "name": "value1",
      "type": "Array<Contract__getProposalsResultValue1Struct>",
    },
  ],
  "methods": [
    Method {
      "body": "this.value0 = value0
this.value1 = value1",
      "name": "constructor",
      "params": Immutable.List [
        Param {
          "name": "value0",
          "type": "BigInt",
        },
        Param {
          "name": "value1",
          "type": "Array<Contract__getProposalsResultValue1Struct>",
        },
      ],
      "returnType": null,
    },
    Method {
      "body": "
            let map = new TypedMap<string,ethereum.Value>();
            map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));map.set('value1', ethereum.Value.fromTupleArray(this.value1))
            return map;
            ",
      "name": "toMap",
      "params": [],
      "returnType": NamedType {
        "name": "TypedMap<string,ethereum.Value>",
      },
    },
    Method {
      "body": "return this.value0;",
      "name": "getSize",
      "params": [],
      "returnType": "BigInt",
    },
    Method {
      "body": "return this.value1;",
      "name": "getValue1",
      "params": [],
      "returnType": "Array<Contract__getProposalsResultValue1Struct>",
    },
  ],
  "name": "Contract__getProposalsResult",
}
`;

exports[`ABI code generation > Generated types > Type test 6`] = `
Class {
  "export": true,
  "extends": "ethereum.SmartContract",
  "members": [],
  "methods": [
    StaticMethod {
      "body": "
        return new Contract('Contract', address);
        ",
      "name": "bind",
      "params": Immutable.List [
        Param {
          "name": "address",
          "type": "Address",
        },
      ],
      "returnType": NamedType {
        "name": "Contract",
      },
    },
    Method {
      "body": "
        
        let result = super.call(
      'read',
      'read():(bytes32)',
      [])

        return ( result[0].toBytes())",
      "name": "read",
      "params": Immutable.List [],
      "returnType": NamedType {
        "name": "Bytes",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'read',
      'read():(bytes32)',
      [])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toBytes())",
      "name": "try_read",
      "params": Immutable.List [],
      "returnType": "ethereum.CallResult<Bytes>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'getProposal',
      'getProposal(uint256,(uint8,(address))):((uint8,address,bytes,address,address,uint256,uint256,uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(proposalId), ethereum.Value.fromTuple(param1)])

        return ( changetype<Contract__getProposalResultValue0Struct>(result[0].toTuple()))",
      "name": "getProposal",
      "params": Immutable.List [
        Param {
          "name": "proposalId",
          "type": "BigInt",
        },
        Param {
          "name": "param1",
          "type": "Contract__getProposalInputParam1Struct",
        },
      ],
      "returnType": NamedType {
        "name": "Contract__getProposalResultValue0Struct",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'getProposal',
      'getProposal(uint256,(uint8,(address))):((uint8,address,bytes,address,address,uint256,uint256,uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(proposalId), ethereum.Value.fromTuple(param1)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( changetype<Contract__getProposalResultValue0Struct>(value[0].toTuple()))",
      "name": "try_getProposal",
      "params": Immutable.List [
        Param {
          "name": "proposalId",
          "type": "BigInt",
        },
        Param {
          "name": "param1",
          "type": "Contract__getProposalInputParam1Struct",
        },
      ],
      "returnType": "ethereum.CallResult<Contract__getProposalResultValue0Struct>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'getProposals',
      'getProposals():(uint256,(uint256,string)[])',
      [])

        return ( new Contract__getProposalsResult(
                result[0].toBigInt(), result[1].toTupleArray<Contract__getProposalsResultValue1Struct>()
              ))",
      "name": "getProposals",
      "params": Immutable.List [],
      "returnType": NamedType {
        "name": "Contract__getProposalsResult",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'getProposals',
      'getProposals():(uint256,(uint256,string)[])',
      [])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( new Contract__getProposalsResult(
                value[0].toBigInt(), value[1].toTupleArray<Contract__getProposalsResultValue1Struct>()
              ))",
      "name": "try_getProposals",
      "params": Immutable.List [],
      "returnType": "ethereum.CallResult<Contract__getProposalsResult>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(string):(string)',
      [ethereum.Value.fromString(param0)])

        return ( result[0].toString())",
      "name": "overloaded",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "string",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(string):(string)',
      [ethereum.Value.fromString(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "string",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(uint256):(string)',
      [ethereum.Value.fromUnsignedBigInt(param0)])

        return ( result[0].toString())",
      "name": "overloaded1",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "BigInt",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(uint256):(string)',
      [ethereum.Value.fromUnsignedBigInt(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded1",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "BigInt",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
    Method {
      "body": "
        
        let result = super.call(
      'overloaded',
      'overloaded(bytes32):(string)',
      [ethereum.Value.fromFixedBytes(param0)])

        return ( result[0].toString())",
      "name": "overloaded2",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "Bytes",
        },
      ],
      "returnType": NamedType {
        "name": "string",
      },
    },
    Method {
      "body": "
        
        let result = super.tryCall(
      'overloaded',
      'overloaded(bytes32):(string)',
      [ethereum.Value.fromFixedBytes(param0)])
        if (result.reverted) {
          return new ethereum.CallResult()
        }
        let value = result.value
        return ethereum.CallResult.fromValue( value[0].toString())",
      "name": "try_overloaded2",
      "params": Immutable.List [
        Param {
          "name": "param0",
          "type": "Bytes",
        },
      ],
      "returnType": "ethereum.CallResult<string>",
    },
  ],
  "name": "Contract",
}
`;
