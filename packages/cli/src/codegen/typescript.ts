class Param {
  private name: string
  private type: string
  constructor(name: string, type: string) {
    this.name = name
    this.type = type
  }

  toString() {
    return `${this.name}: ${this.type.toString()}`
  }
}

class Method {
  private name: string
  private params: string[]
  private returnType: string
  private body: string
  constructor(name: string, params: string[], returnType: string, body: string) {
    this.name = name
    this.params = params || []
    this.returnType = returnType
    this.body = body || ''
  }

  toString() {
    return `
  ${this.name}(${this.params.map(param => param.toString()).join(', ')})${
      this.returnType ? `: ${this.returnType.toString()}` : ''
    } {${this.body}
  }
`
  }
}

class StaticMethod {
  private name: string
  private params: string[]
  private returnType: string
  private body: string
  constructor(name: string, params: string[], returnType: string, body: string) {
    this.name = name
    this.params = params || []
    this.returnType = returnType || 'void'
    this.body = body || ''
  }

  toString() {
    return `
  static ${this.name}(${this.params.map(param => param.toString()).join(', ')})${
      this.returnType ? `: ${this.returnType.toString()}` : ''
    } {${this.body}
  }
`
  }
}

type ClassOptions = { extends?: string; export?: boolean }

class Class {
  private name: string
  private extends: string | undefined
  private methods: string[]
  private members: any[]
  private export: boolean
  constructor(name: string, options: ClassOptions) {
    this.name = name
    this.extends = options.extends
    this.methods = []
    this.members = []
    this.export = options.export || false
  }

  addMember(member: any) {
    this.members.push(member)
  }

  addMethod(method: any) {
    this.methods.push(method)
  }

  toString() {
    return `
${this.export ? 'export' : ''} class ${this.name}${
      this.extends ? ` extends ${this.extends}` : ''
    } {
${this.members.map(member => member.toString()).join('\n')}
${this.methods.map(method => method.toString()).join('')}
}
`
  }
}

class ClassMember {
  name: string
  type: string

  constructor(name: string, type: string) {
    this.name = name
    this.type = type
  }

  toString() {
    return `  ${this.name}: ${this.type.toString()}`
  }
}

class NamedType {
  private name: string
  constructor(name: string) {
    this.name = name
  }

  toString() {
    return this.name
  }

  capitalize() {
    this.name = this.name.charAt(0).toUpperCase() + this.name.slice(1)
    return this
  }

  isPrimitive() {
    let primitives = [
      'boolean',
      'u8',
      'i8',
      'u16',
      'i16',
      'u32',
      'i32',
      'u64',
      'i64',
      'f32',
      'f64',
      'usize',
      'isize',
    ]
    return primitives.includes(this.name)
  }
}

class ArrayType {
  private name: string

  constructor(inner: string) {
    this.name = `Array<${inner.toString()}>`
  }

  toString() {
    return this.name
  }
}

class NullableType {
  inner: string
  constructor(inner: string) {
    this.inner = inner
  }

  toString() {
    return `${this.inner.toString()} | null`
  }
}

class ModuleImports {
  private nameOrNames: string | string[]
  private module: string

  constructor(nameOrNames: string | string[], module: string) {
    this.nameOrNames = nameOrNames
    this.module = module
  }

  toString() {
    return `import { ${
      typeof this.nameOrNames === 'string' ? this.nameOrNames : this.nameOrNames.join(',')
    } } from "${this.module}"`
  }
}

const namedType = (name: string) => new NamedType(name)
const arrayType = (name: string) => new ArrayType(name)
const param = (name: string, type: string) => new Param(name, type)
const method = (name: string, params: string[], returnType: string, body: string) =>
  new Method(name, params, returnType, body)
const staticMethod = (name: string, params: string[], returnType: string, body: string) =>
  new StaticMethod(name, params, returnType, body)
const klass = (name: string, options: ClassOptions) => new Class(name, options)
const klassMember = (name: string, type: string) => new ClassMember(name, type)
const nullableType = (type: string) => new NullableType(type)
const moduleImports = (nameOrNames: string | string[], module: string) =>
  new ModuleImports(nameOrNames, module)

const GENERATED_FILE_NOTE = `
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
`

export {
  // Types
  Param,
  Method,
  StaticMethod,
  Class,
  ClassMember,
  NamedType,
  NullableType,
  ArrayType,
  ModuleImports,
  // Code generators
  namedType,
  arrayType,
  klass,
  klassMember,
  method,
  staticMethod,
  param,
  nullableType,
  moduleImports,
  // Utilities
  GENERATED_FILE_NOTE,
}
